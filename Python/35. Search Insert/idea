make a new_list = nums - target
so easily if there is 0 then done
!= 0 then two different cases 
1.target > nums[-1] then last index
2.target < nums[-1] then need to find index > 0 here

but this is too naive and code is too messy

so binary search
class Solution:
    def searchInsert(self, nums, target):
        left, right = 0, len(nums) - 1
        while left <= right:
            mid = (left + right) // 2
            if nums[mid] == target:
                return mid
            elif nums[mid] < target:
                left = mid + 1
            else:
                right = mid - 1
        return left


*left, right = 0, len(nums) - 1 => tuple unpacking left = 0 and right = len(nums) - 1
